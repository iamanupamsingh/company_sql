SHOW DATABASES;
CREATE DATABASE company;
USE company;
CREATE TABLE employee(
	emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name varchar(40),
    birth_day DATE,
    SEX VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
    );
    # super_id branch_id are foreign keys pointing other tables
    # but we cant make then f.k. right now 
    # bcz other tables dont exist yet
    
    DESCRIBE employee;
    
    CREATE TABLE branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(25),
    mgr_id INT,
    mgr_start_date DATE,
    
    # FOREIGN KEY 
    
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) 
    ON DELETE SET NULL
    );
    
    DESCRIBE branch;
    
    # IMP 
    # setting f.k. for employee now 
    
    ALTER TABLE employee
    ADD FOREIGN KEY (branch_id)
    REFERENCES branch(branch_id)
    ON DELETE SET NULL;
    
    ALTER TABLE employee
    ADD FOREIGN KEY (super_id)
    REFERENCES employee(emp_id)
    ON DELETE SET NULL;
    
    CREATE TABLE client(
		client_id INT PRIMARY KEY,
		client_name VARCHAR(40),
		branch_id INT,
		FOREIGN KEY(branch_id) 
        REFERENCES branch(branch_id) 
        ON DELETE SET NULL
		);
	
    CREATE TABLE works_with (
		emp_id INT,
		client_id INT,
		total_sales INT,
		# icomposite primary key 
        PRIMARY KEY(emp_id, client_id),
		# two f.k.
        FOREIGN KEY(emp_id) 
        REFERENCES employee(emp_id) 
        ON DELETE CASCADE,
		FOREIGN KEY(client_id) 
        REFERENCES client(client_id) 
        ON DELETE CASCADE
		);
    
    CREATE TABLE branch_supplier (
		branch_id INT,
		supplier_name VARCHAR(40),
		supply_type VARCHAR(40),
		# composite primary key
        PRIMARY KEY(branch_id, supplier_name),
		FOREIGN KEY(branch_id) 
        REFERENCES branch(branch_id) 
        ON DELETE CASCADE
		);
        
      SHOW TABLES; 
      
      #INSERTING VALUES WITH initially f.k. = NULL
      INSERT INTO employee VALUES(100,'David','Wallace','1967-11-17',
		'M', 250000, NULL, NULL);
	  #INSERTING INTO NEXT TABLE WHERE f.k. references
      INSERT INTO branch VALUES(1,'Corporate',100,'2006-02-09');
      #NOW UPDATING FIRST TABLE TO ADD f.k. value
      
      UPDATE employee
      SET branch_id=1
      WHERE emp_id =100;
      
      INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11',
		'F', 110000, 100, 1);
	  
      # for next branch branch_id=2
      
	  INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15',
		'M', 75000, 100, NULL);
      INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');
      UPDATE employee
      SET branch_id=2
      WHERE emp_id=102;
    
    INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 
		'F', 63000, 102, 2);
	INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05',
		'F', 55000, 102, 2);
	INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 
		'M', 69000, 102, 2);
        
	#for 3rd branch 
    
    INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 
		'M', 78000, 100, NULL);

	INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

	UPDATE employee
	SET branch_id = 3
	WHERE emp_id = 106;

	INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 
		'M', 65000, 106, 3);
	INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 
		'M', 71000, 106, 3);
    
    #inserting values into branch supplier
    INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
	INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
	INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
	INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
	INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
	INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
	INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');
    
    SELECT *FROM branch_supplier;
    
    #inserting into client 
    INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
	INSERT INTO client VALUES(401, 'Lackawana Country', 2);
	INSERT INTO client VALUES(402, 'FedEx', 3);
    INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
	INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
	INSERT INTO client VALUES(405, 'Times Newspaper', 3);
	INSERT INTO client VALUES(406, 'FedEx', 2);
    SELECT *FROM client;
    
    #inserting into works_with
    INSERT INTO works_with VALUES(105, 400, 55000);
	INSERT INTO works_with VALUES(102, 401, 267000);
	INSERT INTO works_with VALUES(108, 402, 22500);
	INSERT INTO works_with VALUES(107, 403, 5000);
	INSERT INTO works_with VALUES(108, 403, 12000);
	INSERT INTO works_with VALUES(105, 404, 33000);
	INSERT INTO works_with VALUES(107, 405, 26000);
	INSERT INTO works_with VALUES(102, 406, 15000);
	INSERT INTO works_with VALUES(105, 406, 130000);
    SELECT *FROM works_with;
    
     SELECT *FROM employee;
     
     # find all the employees order by salary
     SELECT *FROM employee
     ORDER BY salary ASC;
     SELECT *FROM employee ORDER BY salary DESC; 
     
     #find all emp ordered by sex and then name
     SELECT *FROM employee
     ORDER BY sex, first_name, last_name;
     
     #find first 5 employees in the table
     SELECT *FROM employee
     LIMIT  5;
     
     # find first and last name of all employees
     SELECT first_name, last_name FROM employee;
     
     SELECT first_name AS forname , last_name AS surname FROM employee;			#IMP
     
     # find out all the different banch_ids
      SELECT DISTINCT branch_id FROM employee;
      
	 # FUNCTIONS 
     
     #find the number of employees
      SELECT COUNT(emp_id)
      FROM employee;
      
      # how many employees have a supervisor
      SELECT COUNT(super_id)
      FROM employee; 
      
      #find the no of females born after 1970
      SELECT COUNT(emp_id)
      FROM employee
      WHERE sex='F' AND birth_day>'1970-01-01';
     
     #find the average of slaries of all emp
     SELECT AVG(salary) 
     FROM employee;
     
     SELECT AVG(salary) FROM employee
     WHERE sex='M';
     
     # find the sum of all salaries 
     SELECT SUM(salary) FROM employee;
     
     #find out no of MALES AND FEMALE
     SELECT COUNT(sex) FROM employee
     GROUP BY sex;
     
     SELECT COUNT(sex), sex FROM employee						# IMP
     GROUP BY sex;
     
	 # find the total sales of each salesman
     SELECT emp_id, SUM(total_sales) FROM works_with 
     GROUP BY emp_id;
     
     
     # WILDCARDS 
	 # for patterns .. % -> any no of char and _ means One character
     
     # find any client who are an LLC 
     SELECT* FROM client;
     SELECT * FROM client 
     WHERE client_name LIKE '%LLC';
     
     #find any branch suppliers who are in any Label business
     SELECT *FROM branch_supplier
     WHERE supplier_name LIKE '% Label%';
     
     # find any employee born in October 					# IMP 
     SELECT * FROM employee 
     WHERE birth_day LIKE '%10%';							# WRONG 
     
     SELECT * FROM employee
     WHERE birth_day LIKE '____-10%';
     
     # find any clients who are schools 
     SELECT * FROM client
     WHERE client_name LIKE '%school%';
     
     # UNION 
     
     #find the list of employee name and branch name 
     
     SELECT first_name FROM employee
     UNION
     SELECT branch_name from branch; 						# in a single column (appended below) 
     
     SELECT first_name, last_name FROM employee
     UNION 
     SELECT branch_name FROM branch; 						# ERROR (different number of columns) 
     
     # both the variables must have SAME NO. COLUMNS and SAME DATA TYPE 
     # column name of the first SELECT column is displayed 
     
     SELECT first_name FROM employee
     UNION
     SELECT branch_name from branch 
     UNION 
     SELECT client_name FROM client;
	
     SELECT client_name, client.branch_id FROM client 
     UNION 
     SELECT supplier_name, branch_supplier.branch_id FROM branch_supplier ;
     
     # find a list of all money spent or earned by the company
     SELECT (-salary) AS amounts FROM employee 
     UNION 
     SELECT total_sales FROM works_with;
     
     ### JOINS ###
     
     INSERT INTO branch VALUES (4,'Buffalo',NULL,NULL);
     SELECT *FROM branch;
     
     # find all branches and the names of managers
     SELECT employee.emp_id , employee.first_name, branch.branch_name
     FROM employee
     JOIN branch
     ON employee.emp_id = branch.mgr_id;
     
     # LEFT JOIN   includes all rows from the left side table (FROM table)
     
     SELECT employee.emp_id, employee.first_name, branch.branch_name
     FROM employee
     LEFT JOIN branch
     ON employee.emp_id = branch.mgr_id ;
     
     # RIGHT JOIN 
     SELECT employee.emp_id, employee.first_name, branch.branch_name
     FROM employee
     RIGHT JOIN branch
     ON employee.emp_id = branch.mgr_id ;
     
     # FULL OUTER JOIN = results of LEFT JOIN + RIGHT JOIN 
     
     ## NESTED QUERIES 
     
     #find the names of all employees who have sold over 30k to a single client
    SELECT employee.first_name, employee.last_name FROM employee
    WHERE employee.emp_id IN (
		SELECT works_with.emp_id FROM works_with
		WHERE works_with.total_sales>30000
	) ;
     
     #find all clients who are handled by the branch managed by Michael Scott (assume michaels id known)
     SELECT client.client_name FROM client
     WHERE branch_id = (
		SELECT branch.branch_id 
        FROM branch 
        WHERE mgr_id=102
        LIMIT 1														# IMP 
	);
     
       
       # ON DELETE #
      # FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) 
	  # ON DELETE SET NULL
       
       DELETE FROM employee
       WHERE emp_id=102;
       
       SELECT *FROM employee;					# sup_id SET NULL where it was 102
       SELECT * FROM branch;					#mgr_id of scraton SET NULL 
     
	
    # TRIGGERS - piece of SQL code to do something when any action is performed
